import random
import yaml
import time
import os


def generate_username(name: str) -> str:
    """
    Generates and returns unique value from stored in yaml file variable and appended timestamp
        :param name:            String argument
        :return:                generated_name string variable
    """
    timestamp = str(int(time.time()))
    generated_name = f'{name}{timestamp}'
    if generated_name == f'{name}{timestamp}':
        return str(generated_name).capitalize()

def generate_phone() -> str:
    """
    Generates US based random 10 digits phone number
        :return:                phone_number str variable
    """
    phone_number_len = 9
    phone_number = '1'
    numbers = get_whitelisted_digits()
    for i in range(phone_number_len):
        phone_number += ''.join(random.choice(str(numbers)))
    return str(int(phone_number))

def get_whitelisted_digits() -> int:
    """
    Retrieving int variable with whitelisted in configuration yaml file digits
        :return:                whitelisted_digits int variable
    """
    config_folder = os.path.join(os.path.dirname(__file__), '..', 'data')
    config_file_path = os.path.join(config_folder, 'common_data.yaml')

    with open(config_file_path, 'r') as file:
        data = yaml.safe_load(file)
    whitelisted_digits = data['whitelisted_characters']['digits']
    return whitelisted_digits

def get_whitelisted_letters() -> str:
    """
    Retrieving str variable with whitelisted in configuration yaml file letters
        :return:                whitelisted_letters str variable
    """
    config_folder = os.path.join(os.path.dirname(__file__), '..', 'data')
    config_file_path = os.path.join(config_folder, 'common_data.yaml')

    with open(config_file_path, 'r') as file:
        data = yaml.safe_load(file)
    whitelisted_letters = data['whitelisted_characters']['letters_basic']
    return whitelisted_letters

def get_whitelisted_basic_symbols() -> str:
    """
    Retrieving str variable with whitelisted in configuration yaml file symbols
        :return:                basic_symbols str variable
    """
    config_folder = os.path.join(os.path.dirname(__file__), '..', 'data')
    config_file_path = os.path.join(config_folder, 'common_data.yaml')

    with open(config_file_path, 'r') as file:
        data = yaml.safe_load(file)
    basic_symbols = data['whitelisted_characters']['symbols_basic']
    return basic_symbols

def get_whitelisted_extended_symbols() -> str:
    """
    Retrieving str variable with whitelisted in configuration yaml file additional symbols
        :return:                extended_symbols str variable
    """
    config_folder = os.path.join(os.path.dirname(__file__), '..', 'data')
    config_file_path = os.path.join(config_folder, 'common_data.yaml')

    with open(config_file_path, 'r') as file:
        data = yaml.safe_load(file)
    extended_symbols = data['whitelisted_characters']['symbols_extended']
    return extended_symbols

def generate_password() -> str:
    """
    Randomly generates unique password 15 symbols length (configurable) with all configured whitelisted symbols
        :return:                generated_password str variable
    """
    password_len = 15
    generated_password = ''
    digits = str(get_whitelisted_digits())
    letters = str(get_whitelisted_letters())
    symbols = str(get_whitelisted_basic_symbols())
    extra_symbols = str(get_whitelisted_extended_symbols())
    password_characters = f'{digits}{letters}{symbols}{extra_symbols}'
    for n in range(password_len):
        generated_password += ''.join(random.choice(str(password_characters)))
    return str(generated_password)

def generate_email(email: str) -> str:
    """
    Generates unique email, partially configured in configuration yaml file
        :param email:           String argument with email template
        :return:                unique email, generated by combining template and timestamp
    """
    timestamp = str(int(time.time()))
    generated_email = str(email).replace('{placeholder}', timestamp)
    return str(generated_email.lower())

def get_address(address_yml: dict) -> str:
    """
    Retrieving address from configuration yaml file and combining values into string variable
        :param address_yml:     Dict argument with address items and values
        :return:                address string variable
    """
    address = ', '.join(str(address_yml[val]) for val in address_yml)
    return address
